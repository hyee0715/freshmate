name: CI/CD using Github Actions

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      # 서비스에 필요한 yml 파일 생성
      # application-db.yml 생성
      - name: Make application-db.yml
        if: |
          contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-db.yml
          echo ${{ secrets.YML_DEV_DB }} | base64 --decode > ./application-db.yml
        shell: bash

      # application-file.yml 생성
      - name: Make application-file.yml
        if: |
          contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-file.yml
          echo ${{ secrets.YML_DEV_FILE }} | base64 --decode > ./application-file.yml
        shell: bash

      # application-jwt.yml 생성
      - name: Make application-jwt.yml
        if: |
          contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-jwt.yml
          echo ${{ secrets.YML_DEV_JWT }} | base64 --decode > ./application-jwt.yml
        shell: bash

      # Gradle에 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod 777 ./gradlew

      # Gradle로 clean build
      - name: Build with Gradle
        run: ./gradlew clean build

      # DockerHub에 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker image 빌드
      - name: Build Docker
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.FRESHMATE_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.FRESHMATE_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          
          docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/freshmate -f Dockerfile-$CURRENT_UPSTREAM .

      # DuckerHub에 Push
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/freshmate:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to Dev
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.FRESHMATE_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/freshmate:latest
            chmod 777 ./deploy.sh
            ./deploy.sh
            docker image prune -f
